name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main, dev ]
  push:
    branches: [ main, dev ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres@123
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=5

      mailpit:
        image: axllent/mailpit
        ports:
          - 1025:1025
          - 8025:8025

      minio:
        image: minio/minio
        ports:
          - 9000:9000
          - 9001:9001
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        options: >-
          --entrypoint "sh"
        volumes:
          - minio-data:/data

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Start MinIO
        run: docker run -d --name minio -p 9000:9000 -p 9001:9001 -e "MINIO_ROOT_USER=minioadmin" -e "MINIO_ROOT_PASSWORD=minioadmin" minio/minio server /data --console-address ":9001"

      - name: Create test config file
        run: |
          mkdir -p backend/src/test/resources
          cat > backend/src/test/resources/application-test.properties << EOF
          # Test database configuration
          spring.datasource.url=jdbc:h2:mem:testdb
          spring.datasource.username=sa
          spring.datasource.password=
          spring.datasource.driver-class-name=org.h2.Driver
          spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
          spring.jpa.hibernate.ddl-auto=create-drop
          
          # AWS configuration for tests
          spring.cloud.aws.credentials.access-key=test
          spring.cloud.aws.credentials.secret-key=test
          spring.cloud.aws.region.static=us-east-1
          spring.cloud.aws.s3.bucket=test-bucket
          spring.cloud.aws.s3.path-style-access=true
          spring.cloud.aws.endpoint=http://localhost:9000
          spring.cloud.aws.endpoint.public=http://localhost:9000
          
          # Mail configuration for tests
          spring.mail.host=localhost
          spring.mail.port=1025
          spring.mail.username=test
          spring.mail.password=test
          EOF

      - name: Build and test with Maven
        working-directory: ./backend
        run: |
          ./mvnw clean verify -Dspring.profiles.active=test
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/postgres
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres@123
          SPRING_MAIL_HOST: localhost
          SPRING_MAIL_PORT: 1025
          SPRING_CLOUD_AWS_ENDPOINT: http://localhost:9000
          SPRING_CLOUD_AWS_ENDPOINT_PUBLIC: http://localhost:9000
          SPRING_CLOUD_AWS_CREDENTIALS_ACCESS_KEY: minioadmin
          SPRING_CLOUD_AWS_CREDENTIALS_SECRET_KEY: minioadmin
          SPRING_CLOUD_AWS_REGION_STATIC: us-east-1
          SPRING_CLOUD_AWS_S3_PATH_STYLE_ACCESS: true

      - name: Build Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        working-directory: ./backend
        run: docker build -t grapevine .

      - name: Upload build artifacts
        if: success() && (github.event_name == 'push' && github.ref == 'refs/heads/main')
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: backend/target/*.jar

  deploy:
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ec2-3-140-184-86.us-east-2.compute.amazonaws.com >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          echo "Starting deployment process"
          
          # SSH into EC2 and run deployment steps
          ssh -i ~/.ssh/id_rsa ubuntu@ec2-3-140-184-86.us-east-2.compute.amazonaws.com << EOF
            # Fetch the latest deploy branch and pull the latest changes
            cd /home/ubuntu/grapevine
            git checkout dev 
            git fetch origin dev
            git pull
 
            git checkout deploy
            git fetch origin deploy
            git pull origin deploy
            git merge dev
            git add .
            git commit -m "Updated deploy branch with latest changes"
            git push

            cd backend
            # Stop and remove old containers
            docker-compose down --volumes --remove-orphans
            # Run setup.sh to start containers
            ./setup.sh

            echo "Deployment successful!"
          EOF
