name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres@123
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=5

      mailpit:
        image: axllent/mailpit
        ports:
          - 1025:1025
          - 8025:8025

      minio:
        image: minio/minio
        ports:
          - 9000:9000
          - 9001:9001
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        options: --command="server /data --console-address ':9001'"

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build and test with Maven
      run: ./mvnw clean verify
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/postgres
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: postgres@123
        SPRING_MAIL_HOST: localhost
        SPRING_MAIL_PORT: 1025
        SPRING_CLOUD_AWS_ENDPOINT: http://localhost:9000
        SPRING_CLOUD_AWS_ENDPOINT_PUBLIC: http://localhost:9000
        SPRING_CLOUD_AWS_CREDENTIALS_ACCESS_KEY: minioadmin
        SPRING_CLOUD_AWS_CREDENTIALS_SECRET_KEY: minioadmin
        SPRING_CLOUD_AWS_REGION_STATIC: us-east-1
        SPRING_CLOUD_AWS_S3_PATH_STYLE_ACCESS: true

    - name: Build Docker image
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: docker build -t grapevine .

    - name: Upload build artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: target/*.jar

  deploy:
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: target

    - name: Deploy to production
      run: |
        echo "Deploying application to production server"
        # Replace with actual deployment commands once we have a "production" environment (whichever AWS service we use to host)

        echo "Deployment successful!"
